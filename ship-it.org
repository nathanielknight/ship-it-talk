* Ship It

Python packaging and distribution

* Problem: Building something with python

Trying to install a tool/library, but

- dependency hell
- could not find libxyz

* Problem: Distributing something that is Python

You want to share a project with other Pythonistas / send it to the cloud, but 
 
- all of the above
- small differences between environments (OS X, Ubuntu, Windows)
- breaks if you use certain versions of Python

It's hard to install from source, or when you try to send it away it breaks
* Problem:
Getting from

  "It works on the developer's laptop"

to

  "It works wherever it needs to"

OR

Making Eggs and Wheels

with
- distutils & setuptools
- pip
- virtualenv
* TODO Terminology
* In Python
Source Code + Metadata = "Distribution"

Defines:
 - How do we store code?
 - What extra information do we need?
 - How do we build a running system?

Common distribution file types:
- Egg
- Wheel
* Metadata
Offical format in a conventional format (defined by PEPs 241, 314)

- Name
- Version
- Platform
- Description
- License
- Links (author, homepage, keywords, &c.)

Dependencies:
- Requires
- Provides
- Conflicts with 

Put into `PKG-INFO` file, MUST be constructed with a tool.
* Library: `distutils`
In the python standard library (started 1998, merged ~2000)

defines `setup.py` -> starting point for all installation tasks

Handles source code, metadata, version formats -- hairy details

Not very pleasant to use directly
* Library: `setuptools`
Not in standard library, but effectively standard (built with distutils)

Compiles source code into Eggs/Wheels

Manages compilation, native packages, dependencies

Can also define "entrypoints" - scripts, installers, make executable
Eggs <- this is the fun stuff
#+BEGIN_SRC python
  import setuptools

  setuptools.setup(
      name="hello_world",
      version="0.0.0",
  )
#+END_SRC
* Other Libraries
MANY MANY plugins, extensions, alternatives, etc.

Varying quality, maturity, obsolescence

There may be other plugins in `setup.py`; it's a python 
script and it's not un-Pythonic to do things in it.
* Tool: `pip`
`pip` takes care of 

- finding sources for things (e.g. in `pypi.org`)
- downloading & verifying them
- installing them to a standard, tidy place 

<TODO: Link to tutorial>
* Tool: `virtualenv`
For isolating dependencies (packages, python versions)

- Create
- Activate

(now `python`, `pip`, etc. point to project specific executables
configured to use project-specific packages/locations)

- Deactivate

(now everything is back to normal)

<TODO: link to tutorials>
* Conclusion
- Python makes "distributions" to send out
- consist of source-code + metadata
- managed by standard-ish tools

Python packaging is a little more complicated than some languages, but
the standard-ish tools (setuptools, pip, virtualenv) will get you a
loooong way
* TODO Sources & Thanks
